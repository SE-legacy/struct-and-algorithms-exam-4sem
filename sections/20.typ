/ Полный перебор: --- это метод решения задачи (который любит Кирилл Назаров), при котором рассматриваются все возможные варианты решений, и выбирается оптимальный или подходящий. Он гарантирует нахождение решения, но часто требует экспоненциального времени из-за большого количества вариантов.

- Рассматриваются все варианты (комбинации, перестановки и т.п.).

- Используется, когда пространство решений дискретно и конечное.

- Применяется как базовый или начальный метод, который затем можно оптимизировать.

- Часто непрактичен для больших задач из-за высокой вычислительной сложности.

/ Поиск с возвратом (Backtracking): --- это улучшенный вариант полного перебора. Решение строится пошагово, при этом частично проверяются условия. Если текущий путь не может привести к решению, происходит возврат (откат) к предыдущему шагу и пробуется другой вариант. Это позволяет отсекать части пространства решений, сокращая время перебора.

*Пример:* поиск всех перестановок строки. Допустим, нужно вывести все перестановки строки "ABC".

- *Полный перебор:* перебираем все возможные перестановки (6 штук для 3 символов).

- *Поиск с возвратом:* на каждом шаге выбираем символ, который ещё не использовался, добавляем его к текущему решению, если условие не нарушается — идём дальше, иначе откатываемся.

Псевдокод для второго решения:
```js
function backtrack(current_permutation, used_chars):
    if length(current_permutation) == length(original_string):
      print current_permutation
      return
    for each char in original_string:
      if char not in used_chars:
        add char to current_permutation
        mark char as used
        backtrack(current_permutation, used_chars)
        remove char from current_permutation
        unmark char as used
```