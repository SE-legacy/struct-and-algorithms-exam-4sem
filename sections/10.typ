#import "../conf.typ": definition, theorem
== Класс NP

Класс $N P$ включает в себя четыре вида задач:

- Задачи, которые нельзя отнести ни к классу $P$, ни к классу $E$
- Задачи, которые недетерменированная машина Тьюринага может решить за полиномиальное время, тогда как для детерменированной машины Тьюринга полиномиальный алгоритм неизвестен.
- Для этих задач до сих пор не разрабботан эффективный (т. е. полиномиальный) алгоритм, но и не доказано, что таких алгоритмов не существует.
- К классу $N P$ относятся все задачи, решение которых можно _проверить_ за полиномиальное время. Оракул предлагает решения, которые после проверки верификатором за полиномиальное время приобретают "юридическую" силу

== Проблема равенства P и NP

Поскольку детерминированная машина Тьюринга может рассматриваться как специальный случай недетерминированной машины Тьюринга, в которой отсутствует стадия угадывания, а стадия проверки совпадает с ДМТ, класс $N P$ включает в себя класс $P$, а также некоторые проблемы, для решения которых известны лишь алгоритмы, экспоненциально зависящие от размера входа (то есть неэффективные для больших входов).

*Вопрос о равенстве этих двух классов считается одной из самых сложных открытых проблем в области теоретической информатики.*

Доказательств нет, но считается, что $P subset "NP"$

== Класс NPC

#definition[$N P$ задача, к которой полиномиально сводятся все задачи класса $N P$, называется *$"NP"$-полной* (*NPC*).]

#theorem[$exists$ полиномиально решаемая NPC-задача $=>$ $"NPC" = "NP"$][]

Примеры NPC-задач (их решаемость за полиномиальное время не доказана и не опровергнута):
- Задача коммивояжёра
- Решение систем уравнений с целыми переменными
- Составление расписаний, учитывающих определённые условия
- Задача о рюкзаке
- Задача раскроя
