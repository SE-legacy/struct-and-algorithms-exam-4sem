#import "../conf.typ": definition, lets

== Рекуррентные соотношения

Анализ сложности состоит в определении трудоёмкости.

#definition[
  *Рекуррентное соотношение* --- это уравнение или неравенство, описывающее зависимость следующих значений от предыдущих.
]

Для его анализа по *методу математической индукции* мы находим мажорирующую функцию $f(n)$. Для этого мы предполгаем, что в базовом случае для достаточно большого $n_0$ неравенство выполняется, и выводим индуктивный шаг.


*Метод подстановки* состоит из трёх шагов:

+ Делается догадка о виде решения
+ С помощью метода математической индукции доказывается, что решение правильное
+ Вычисляются константы

*Пример*. Рассмотрим конкретное рекуррентное соотношение:

$
cases(
  f(0) = 1,
  f(n + 1) = 2 * f(n)
)
$

Предположим, $f(n) = 2^n$.

Базис: $f(0) = 1, f(n) = 2^n$

Индукция: $f(n) = 2^n => f(n + 1) = 2^(n + 1)$


*Пример 2*. Асимптотическая оценка

$
T(n) <= cases(
  c_1\, " если " n = 1\, c_1 > 0,
  2 T(n/2) + c_2 n\, " если " n > 1
)
$

Предположим, что $T(n) <= a n log n$, где $a$ --- некоторое число. Это делает базис равным нулю, что заставляет добавить в предположение ещё одно слагаемое: $T(n) <= a n log n + b$.

Для доказательства получившегося выражения прибегнем к методу математической индукции.
