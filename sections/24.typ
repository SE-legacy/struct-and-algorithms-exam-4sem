/ Алгоритмы сортировки без сравнения: --- это сортировки, которые не сравнивают элементы напрямую, а используют свойства представления данных, например, цифры или биты.

== Сортировка подсчётом (Counting Sort)

*Принцип работы:*
- Алгоритм работает без сравнений элементов.
- Сначала создаётся вспомогательный массив (счётчик) размера равного диапазону значений сортируемых элементов.
- Проходим по исходному массиву и считаем, сколько раз встречается каждое значение, увеличивая соответствующую ячейку счётчика.
- Затем по счётчику восстанавливаем отсортированный массив, записывая каждое значение столько раз, сколько оно встречалось.

*Оценка сложности.* Пусть $n$ --- количество элементов, $k$ --- размер диапазона значений. Время работы: $O(n + k)$ --- линейное по сумме количества элементов и размера диапазона. Память: $O(n + k)$ --- для хранения исходного массива и вспомогательного счётчика.

*Особенности использования:*
- Эффективна, когда диапазон значений $k$ невелик по сравнению с $n$.
- Не подходит для сортировки данных с очень большим или неограниченным диапазоном.
- Алгоритм стабильный --- сохраняет порядок равных элементов.
- Часто используется как подшаг в более сложных алгоритмах (например, в поразрядной сортировке).
- Требует знания или вычисления диапазона значений перед сортировкой.

*Упрощённая реализация на C++:*
```cpp
void counting_sort(int* arr, int n, int min_val, int max_val) {
  int range = max_val - min_val + 1;
  std::vector<int> count(range, 0);

  for (int i = 0; i < n; ++i) {
    count[arr[i] - min_val]++;
  }

  int index = 0;
  for (int i = 0; i < range; ++i) {
    while (count[i] > 0) {
        arr[index++] = i + min_val;
        count[i]--;
    }
  }
}
```
